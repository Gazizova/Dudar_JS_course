{"ast":null,"code":"import _classCallCheck from \"/home/alyona/Documents/MyGit/Dudar_JS_course/egghead/test-0918/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alyona/Documents/MyGit/Dudar_JS_course/egghead/test-0918/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alyona/Documents/MyGit/Dudar_JS_course/egghead/test-0918/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alyona/Documents/MyGit/Dudar_JS_course/egghead/test-0918/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alyona/Documents/MyGit/Dudar_JS_course/egghead/test-0918/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/alyona/Documents/MyGit/Dudar_JS_course/egghead/test-0918/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/alyona/Documents/MyGit/Dudar_JS_course/egghead/test-0918/src/pages/form.js\";\nimport React from \"react\";\nvar scaleNames = {\n  c: \"Celsius\",\n  f: \"Fahrenheit\"\n};\n\nvar TemperatureInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TemperatureInput, _React$Component);\n\n  function TemperatureInput(props) {\n    var _this;\n\n    _classCallCheck(this, TemperatureInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TemperatureInput).call(this, props));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TemperatureInput, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.props.onTemperatureChange(event.target.value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var scale = this.props.scale;\n      return React.createElement(\"div\", {\n        className: \"form-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Enter temperature in \", scaleNames[scale], \":\", \" \", React.createElement(\"input\", {\n        name: \"farengeit\",\n        type: \"text\",\n        onChange: this.handleChange,\n        value: this.props.temperature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return TemperatureInput;\n}(React.Component);\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Form, _React$Component2);\n\n  function Form(props) {\n    var _this2;\n\n    _classCallCheck(this, Form);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));\n    _this2.state = {\n      value: \"\",\n      temperature: \"\" //   scale: \"c\"\n\n    };\n    _this2.handleChange = _this2.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.handleChangeTemperarure = _this2.handleChangeTemperarure.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.onSubmit = _this2.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    return _this2;\n  }\n\n  _createClass(Form, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        value: event.target.value\n      });\n    }\n  }, {\n    key: \"handleChangeTemperarure\",\n    value: function handleChangeTemperarure(temperature) {\n      this.setState({\n        temperature: temperature\n      });\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      e.preventDefault();\n\n      if (!this.state.value) {\n        alert(\"Please, input something\");\n      } else {\n        alert(\"You input: \" + this.state.value.toUpperCase());\n      }\n    }\n  }, {\n    key: \"temperatureCalculator\",\n    value: function temperatureCalculator(props) {\n      if (props.celsius >= 100) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \"Temperature is: \", props.celsius, \". Water will boil\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \"Temperature is: \", props.celsius, \". Water will not boil\");\n      }\n    }\n  }, {\n    key: \"toCelsius\",\n    value: function toCelsius(fahrenheit) {\n      return (fahrenheit - 32) * 5 / 9;\n    }\n  }, {\n    key: \"toFahrenheit\",\n    value: function toFahrenheit(celsius) {\n      return celsius * 9 / 5 + 32;\n    }\n  }, {\n    key: \"tryConvert\",\n    value: function tryConvert(temperature, convert) {\n      var input = parseFloat(temperature);\n\n      if (Number.isNaN(input)) {\n        return \"\";\n      }\n\n      var output = convert(input);\n      var rounded = Math.round(output * 1000) / 1000;\n      return rounded.toString();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var temperature = this.state.temperature;\n      var scale = this.state.scale;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Input any text: \"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: this.state.value,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(TemperatureInput, {\n        scale: \"c\",\n        onTemperatureChange: this.handleChangeTemperarure,\n        temperature: this.state.temperature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(TemperatureInput, {\n        scale: \"f\",\n        onTemperatureChange: this.handleChangeTemperarure,\n        temperature: this.state.temperature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(this.temperatureCalculator, {\n        celsius: temperature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Form;\n}(React.Component);\n\nexport { Form as default };","map":{"version":3,"sources":["/home/alyona/Documents/MyGit/Dudar_JS_course/egghead/test-0918/src/pages/form.js"],"names":["React","scaleNames","c","f","TemperatureInput","props","handleChange","bind","event","onTemperatureChange","target","value","scale","temperature","Component","Form","state","handleChangeTemperarure","onSubmit","setState","e","preventDefault","alert","toUpperCase","celsius","fahrenheit","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,CAAC,EAAE,SADc;AAEjBC,EAAAA,CAAC,EAAE;AAFc,CAAnB;;IAKMC,gB;;;;;AACJ,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,0FAAMA,KAAN;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AAFiB;AAGlB;;;;iCACYC,K,EAAO;AAClB,WAAKH,KAAL,CAAWI,mBAAX,CAA+BD,KAAK,CAACE,MAAN,CAAaC,KAA5C;AACD;;;6BACQ;AACP,UAAMC,KAAK,GAAG,KAAKP,KAAL,CAAWO,KAAzB;AACA,aACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACwBX,UAAU,CAACW,KAAD,CADlC,OAC4C,GAD5C,EAEE;AACE,QAAA,IAAI,EAAC,WADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,QAAQ,EAAE,KAAKN,YAHjB;AAIE,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWQ,WAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADA,CADF;AAaD;;;;EAvB4Bb,KAAK,CAACc,S;;IA0BhBC,I;;;;;AACnB,gBAAYV,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,WAAKW,KAAL,GAAa;AACXL,MAAAA,KAAK,EAAE,EADI;AAEXE,MAAAA,WAAW,EAAE,EAFF,CAGX;;AAHW,KAAb;AAKA,WAAKP,YAAL,GAAoB,OAAKA,YAAL,CAAkBC,IAAlB,wDAApB;AACA,WAAKU,uBAAL,GAA+B,OAAKA,uBAAL,CAA6BV,IAA7B,wDAA/B;AACA,WAAKW,QAAL,GAAgB,OAAKA,QAAL,CAAcX,IAAd,wDAAhB;AATiB;AAUlB;;;;iCAEYC,K,EAAO;AAClB,WAAKW,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAEH,KAAK,CAACE,MAAN,CAAaC;AAAtB,OAAd;AACD;;;4CACuBE,W,EAAa;AACnC,WAAKM,QAAL,CAAc;AAAEN,QAAAA,WAAW,EAAXA;AAAF,OAAd;AACD;;;6BACQO,C,EAAG;AACVA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAI,CAAC,KAAKL,KAAL,CAAWL,KAAhB,EAAuB;AACrBW,QAAAA,KAAK,CAAC,yBAAD,CAAL;AACD,OAFD,MAEO;AACLA,QAAAA,KAAK,CAAC,gBAAgB,KAAKN,KAAL,CAAWL,KAAX,CAAiBY,WAAjB,EAAjB,CAAL;AACD;AACF;;;0CAEqBlB,K,EAAO;AAC3B,UAAIA,KAAK,CAACmB,OAAN,IAAiB,GAArB,EAA0B;AACxB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAsBnB,KAAK,CAACmB,OAA5B,sBAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAsBnB,KAAK,CAACmB,OAA5B,0BAAP;AACD;AACF;;;8BAESC,U,EAAY;AACpB,aAAQ,CAACA,UAAU,GAAG,EAAd,IAAoB,CAArB,GAA0B,CAAjC;AACD;;;iCAEYD,O,EAAS;AACpB,aAAQA,OAAO,GAAG,CAAX,GAAgB,CAAhB,GAAoB,EAA3B;AACD;;;+BAEUX,W,EAAaa,O,EAAS;AAC/B,UAAMC,KAAK,GAAGC,UAAU,CAACf,WAAD,CAAxB;;AACA,UAAIgB,MAAM,CAACC,KAAP,CAAaH,KAAb,CAAJ,EAAyB;AACvB,eAAO,EAAP;AACD;;AACD,UAAMI,MAAM,GAAGL,OAAO,CAACC,KAAD,CAAtB;AACA,UAAMK,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,IAApB,IAA4B,IAA5C;AACA,aAAOC,OAAO,CAACG,QAAR,EAAP;AACD;;;6BAEQ;AACP,UAAMtB,WAAW,GAAG,KAAKG,KAAL,CAAWH,WAA/B;AACA,UAAMD,KAAK,GAAG,KAAKI,KAAL,CAAWJ,KAAzB;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,QAAQ,EAAE,KAAKM,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWL,KAHpB;AAIE,QAAA,QAAQ,EAAE,KAAKL,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,EAUE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AACE,QAAA,KAAK,EAAC,GADR;AAEE,QAAA,mBAAmB,EAAE,KAAKW,uBAF5B;AAGE,QAAA,WAAW,EAAE,KAAKD,KAAL,CAAWH,WAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAVF,EAiBE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AACE,QAAA,KAAK,EAAC,GADR;AAEE,QAAA,mBAAmB,EAAE,KAAKI,uBAF5B;AAGE,QAAA,WAAW,EAAE,KAAKD,KAAL,CAAWH,WAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,yBAAM,qBAAN;AAA4B,QAAA,OAAO,EAAEA,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CAjBF,EA0BE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1BF,CADF,CADF;AAgCD;;;;EAzF+Bb,KAAK,CAACc,S;;SAAnBC,I","sourcesContent":["import React from \"react\";\n\nconst scaleNames = {\n  c: \"Celsius\",\n  f: \"Fahrenheit\"\n};\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.props.onTemperatureChange(event.target.value);\n  }\n  render() {\n    const scale = this.props.scale;\n    return (\n      <div className=\"form-block\">\n      <label>\n        Enter temperature in {scaleNames[scale]}:{\" \"}\n        <input\n          name=\"farengeit\"\n          type=\"text\"\n          onChange={this.handleChange}\n          value={this.props.temperature}\n        />\n      </label>\n      </div>\n    );\n  }\n}\n\nexport default class Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      temperature: \"\"\n      //   scale: \"c\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeTemperarure = this.handleChangeTemperarure.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n  handleChangeTemperarure(temperature) {\n    this.setState({ temperature });\n  }\n  onSubmit(e) {\n    e.preventDefault();\n    if (!this.state.value) {\n      alert(\"Please, input something\");\n    } else {\n      alert(\"You input: \" + this.state.value.toUpperCase());\n    }\n  }\n\n  temperatureCalculator(props) {\n    if (props.celsius >= 100) {\n      return <div>Temperature is: {props.celsius}. Water will boil</div>;\n    } else {\n      return <div>Temperature is: {props.celsius}. Water will not boil</div>;\n    }\n  }\n\n  toCelsius(fahrenheit) {\n    return ((fahrenheit - 32) * 5) / 9;\n  }\n\n  toFahrenheit(celsius) {\n    return (celsius * 9) / 5 + 32;\n  }\n\n  tryConvert(temperature, convert) {\n    const input = parseFloat(temperature);\n    if (Number.isNaN(input)) {\n      return \"\";\n    }\n    const output = convert(input);\n    const rounded = Math.round(output * 1000) / 1000;\n    return rounded.toString();\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    const scale = this.state.scale;\n    return (\n      <div>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-block\">\n            <label htmlFor=\"name\">Input any text: </label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-block\">\n            <TemperatureInput\n              scale=\"c\"\n              onTemperatureChange={this.handleChangeTemperarure}\n              temperature={this.state.temperature}\n            />\n          </div>\n          <div className=\"form-block\">\n            <TemperatureInput\n              scale=\"f\"\n              onTemperatureChange={this.handleChangeTemperarure}\n              temperature={this.state.temperature}\n            />\n            <this.temperatureCalculator celsius={temperature} />\n          </div>\n\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}